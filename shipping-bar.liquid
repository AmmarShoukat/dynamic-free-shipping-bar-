//replace this js in cart.js with oncartupdate function
onCartUpdate() {
  if (this.tagName === 'CART-DRAWER-ITEMS') {
    fetch(`${routes.cart_url}?section_id=cart-drawer`)
      .then((response) => response.text())
      .then((responseText) => {
        const html = new DOMParser().parseFromString(responseText, 'text/html');
        const selectors = ['cart-drawer-items', '.cart-drawer__footer'];
        for (const selector of selectors) {
          const targetElement = document.querySelector(selector);
          const sourceElement = html.querySelector(selector);
          if (targetElement && sourceElement) {
            targetElement.replaceWith(sourceElement);
          }
        }

        fetch('/cart.js')
          .then(response => response.json())
          .then(data => {
            // Assuming settings.cart_free_shipping_amount is available in the global scope
            const freeShippingAmount = settings.cart_free_shipping_amount || 0; // Default to 0 if not available
            const thresholdAmount = freeShippingAmount * 100; // Convert to the desired scale

            calculateProgress(data.total_price, thresholdAmount);
          })
          .catch((e) => {
            console.error(e);
          });
      })
      .catch((e) => {
        console.error(e);
      });
  } else {
    fetch(`${routes.cart_url}?section_id=main-cart-items`)
      .then((response) => response.text())
      .then((responseText) => {
        const html = new DOMParser().parseFromString(responseText, 'text/html');
        const sourceQty = html.querySelector('cart-items');
        this.innerHTML = sourceQty.innerHTML;

        fetch('/cart.js')
          .then(response => response.json())
          .then(data => {
            // Assuming settings.cart_free_shipping_amount is available in the global scope
            const freeShippingAmount = settings.cart_free_shipping_amount || 0; // Default to 0 if not available
            const thresholdAmount = freeShippingAmount * 100; // Convert to the desired scale

            calculateProgress(data.total_price, thresholdAmount);
          })
          .catch((e) => {
            console.error(e);
          });
      })
      .catch((e) => {
        console.error(e);
      });
  }
}

// add this in snippet file


<div class="cart-shipping__wrapper">
  <p class="cart-shipping__numOuter">
    {{ settings.cart_top_first_text }}
    <b>€<span class="cart-shipping__num"></span></b> {{ settings.cart_top_last_text }}
  </p>
  <p class="cart-shipping__success">{{ settings.cart_discount_success_message }}</p>
  <div class="cart-shippingThreshold__bar">
    <span class="cart-shippingThreshold__progress"></span>
  </div>
  <div class="bar-bottom">{{ settings.cart_bottom }}</div>
</div>

<style>
      /*  Style the progress bar  */
      .cart-shipping__wrapper {
        padding: 15px;
        max-width: 700px;
        margin: 0 auto;
      }

      .cart-shippingThreshold__bar {
        position: relative;
        /*  Progress bar background color  */
        background-color: #d8d8d8;
        height: 1rem;
        border-radius: 30px;

      }

      .cart-shippingThreshold__progress {
        position: absolute;
        top: 0;
        left: 0;
        min-width: 0;
        max-width: 100%;
        height: 100%;
        display: block;
        /*  Progress bar fill color  */
        background-color: #212c4b;
        border-radius: 30px;

      }
      .cart-shipping__success {
      display: none;
    }


  /* fk style starts here */

  .cart-shippingThreshold__progress {
    height: 10px;
    top:-2.5px;
  }

  .cart-shippingThreshold__bar {
    height: 5px;
  }

  .cart-shipping__numOuter b {
    letter-spacing: 0;
    font-weight: 700;
    font-size: 14px;
  }

  p.cart-shipping__numOuter,
  .bar-bottom{
    font-size: 12px;
    letter-spacing: 0;
     color:#212c4b;
  }

  .cart-shipping__success {
    font-weight:bolder;
    font-size: 13px;
    letter-spacing: 0;
  }

  .bar-bottom {
    text-align: end;
    margin-top: 10px;
  }

  .cart-shipping__wrapper {
    padding-top:0;
  }
</style>

<script>
     setInterval(function () {
   // Calculate the progress number, and the width of the progress bar.
    function calculateProgress(currentVal, targetVal) {
      var progressBar = document.querySelectorAll('.cart-shippingThreshold__progress');
      var progressNum = document.querySelectorAll('.cart-shipping__num');
      var progressOuter = document.querySelectorAll('.cart-shipping__numOuter');
      var successMsg = document.querySelectorAll('.cart-shipping__success');
      // calculate how far progress is from the total as a percentage
      var result = Math.round(100 * currentVal / targetVal);
      progressBar.forEach(function(el){
        el.setAttribute('style', "width: ".concat(result, "%"));
      })
       // Update the progess text. If threshold is met, show success message
      var newProgressNum = (targetVal - currentVal) / 100;
      if(newProgressNum <= 0){
        successMsg.forEach(function(el){
          el.style.display = 'block';
        });
        progressOuter.forEach(function(el){
          el.style.display = 'none';
        });
        progressNum.forEach(function(el){
          el.textContent = newProgressNum;
        });
      } else {
        successMsg.forEach(function(el){
          el.style.display = 'none';
        });
        progressOuter.forEach(function(el){
          el.style.display = 'block';
        });
        progressNum.forEach(function(el){
          el.textContent = newProgressNum;
        });
      }
    };

    // In your theme's main JS file, find each ajax call where your store adds to, deletes from, and updates the cart. Put this in the success function of each.
    // NOTE: If you make this ajax request outside of the functions that update the cart, the calculator won't sync with the current cart state without refreshing the page. You need to specify that you want to read the current cart data AFTER the new items are added/removed.
     fetch('/cart.js')
    .then(response => response.json())
    .then(data => {
      calculateProgress(data.total_price, {{settings.cart_free_shipping_amount | times: 100}} );
    });
  }, 600);
</script>
    {
    "name": "Shipping BarCart Drawer",
    "settings": [
      {
        "type": "text",
        "id": "cart_top_first_text",
        "label": "Progress Bar Top First Text",
        "default": "Only"
      },
      {
        "type": "text",
        "id": "cart_top_last_text",
        "label": "Progress Bar Top Last Text",
        "default": " until free shipping"
      },
      {
        "type": "text",
        "id": "cart_free_shipping_amount",
        "label": "Free shipping minimum amount",
        "default": "50"
      },
      {
        "type": "textarea",
        "id": "cart_discount_success_message",
        "label": "Message On FreeShipping"
      },
      {
        "type": "text",
        "id": "cart_bottom",
        "label": "Progress Bar Bottom Text",
        "default": "Shipping costs Italy: €6,90"
      }
    ]
  }
